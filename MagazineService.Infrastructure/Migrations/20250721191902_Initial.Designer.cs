// <auto-generated />
using System;
using MagazineService.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MagazineService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250721191902_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MagazineService.Core.Entites.AppCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppCategories");
                });

            modelBuilder.Entity("MagazineService.Core.Entites.AppClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthdayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppClients");
                });

            modelBuilder.Entity("MagazineService.Core.Entites.AppOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalSum")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AppClientId");

                    b.ToTable("AppOrders");
                });

            modelBuilder.Entity("MagazineService.Core.Entites.AppPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppOrderId")
                        .HasColumnType("int");

                    b.Property<int>("AppProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppOrderId");

                    b.HasIndex("AppProductId");

                    b.ToTable("AppPositions");
                });

            modelBuilder.Entity("MagazineService.Core.Entites.AppProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AppCategoryId");

                    b.ToTable("AppProducts");
                });

            modelBuilder.Entity("MagazineService.Core.Entites.AppOrder", b =>
                {
                    b.HasOne("MagazineService.Core.Entites.AppClient", "AppClient")
                        .WithMany("AppOrders")
                        .HasForeignKey("AppClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppClient");
                });

            modelBuilder.Entity("MagazineService.Core.Entites.AppPosition", b =>
                {
                    b.HasOne("MagazineService.Core.Entites.AppOrder", "AppOrder")
                        .WithMany("AppPositions")
                        .HasForeignKey("AppOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazineService.Core.Entites.AppProducts", "AppProducts")
                        .WithMany("AppPositions")
                        .HasForeignKey("AppProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppOrder");

                    b.Navigation("AppProducts");
                });

            modelBuilder.Entity("MagazineService.Core.Entites.AppProducts", b =>
                {
                    b.HasOne("MagazineService.Core.Entites.AppCategory", "AppCategory")
                        .WithMany("AppProducts")
                        .HasForeignKey("AppCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppCategory");
                });

            modelBuilder.Entity("MagazineService.Core.Entites.AppCategory", b =>
                {
                    b.Navigation("AppProducts");
                });

            modelBuilder.Entity("MagazineService.Core.Entites.AppClient", b =>
                {
                    b.Navigation("AppOrders");
                });

            modelBuilder.Entity("MagazineService.Core.Entites.AppOrder", b =>
                {
                    b.Navigation("AppPositions");
                });

            modelBuilder.Entity("MagazineService.Core.Entites.AppProducts", b =>
                {
                    b.Navigation("AppPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
